#CDA6316 Embedded Systems Design Term Project by Caroline N. Desouza & Ramiro Alvarez, Spring 2017

#Main code to control drone with accelerometer:

'use strict';
var MPU6050 = require('mpu6050-wiringpi');
var sumo = require('node-sumo');
var sleep = require('system-sleep');  //interrupt event loop, system sleep
var drone = sumo.createClient();

while (true) {
	var data = MPU6050.read();
	console.log(data);
	if (Math.max(Math.abs(data.accelX), Math.max(Math.abs(data.accelY),
	Math.abs(data.accelZ))) == Math.abs(data.accelX)) {
		if (data.accelX < 0) {
			//drone.left(10);
			console.log('left');
		}
		else {
			// drone.right(10);
			console.log('right');
		}
	}
	
	if (Math.max(Math.abs(data.accelX), Math.max(Math.abs(data.accelY),
	Math.abs(data.accelZ))) == Math.abs(data.accelY)) {
		if (data.accelY < 0) {
			//drone.backward(30);
			console.log('backward');
		}
		else {
			// drone.forward(30);
			console.log('forward');
		}
	}
	
	if (Math.max(Math.abs(data.accelX), Math.max(Math.abs(data.accelY),
	Math.abs(data.accelZ))) == Math.abs(data.accelZ)) {
		if (data.accelZ > 0) {
			//drone.stop();
			console.log('drone stop');
		}
		else {
			//drone.postureJumper();
			//drone.animationsHighJump();
			console.log('jump');
		}
	}
	
	sleep(1000);
}
	


#Python code for MPU6050 accelerometer for use with raspberry pi 3 and jumping sumo drone

#!/usr/bin/python

import smbus
import math

#Power management registers
power_mgmt_1 = 0x6b #register allows user to config power mode & clock source
power_mgmt_2 = 0x6c #register allows user to config frequency of wake-ups in Accelerometer Only Low Power Mode; 
		    #also allows user to put individual axes of the accelerometer and gyroscope into standby mode
 
bus = smbus.SMBus(1) #for Revision 2 boards

address = 0x68  # This is the address value read via the i2cdetect command     

# Now wake the 6050 up as it starts in sleep mode
bus.write_byte_data(address, power_mgmt_1, 0) 
 
def read_byte(adr):
	return bus.read_byte_data(address, adr)

def read_word(adr):
	high = bus.read_byte_data(address, adr)
    low = bus.read_byte_data(address, adr+1)
    val = (high << 8) + low
    return val
 
def read_word_2c(adr):
	val = read_word(adr)
    if (val >= 0x8000):
        return -((65535 - val) + 1)
    else:
        return val

def dist(a,b):
	return math.sqrt((a*a)+(b*b))

def get_y_rotation(x,y,z):
    radians = math.atan2(x, dist(y,z))
    return -math.degrees(radians)

def get_x_rotation(x,y,z):
    radians = math.atan2(y, dist(x,z))
    return math.degrees(radians)

while True:
	accel_xout = read_word_2c(0x3b)
	accel_yout = read_word_2c(0x3d)
	accel_zout = read_word_2c(0x3f)
	 
	accel_xout_scaled = accel_xout / 16384.0
	accel_yout_scaled = accel_yout / 16384.0
	accel_zout_scaled = accel_zout / 16384.0
  
	x = get_x_rotation(accel_xout_scaled, accel_yout_scaled, accel_zout_scaled)
	y = get_y_rotation(accel_xout_scaled, accel_yout_scaled, accel_zout_scaled) 
